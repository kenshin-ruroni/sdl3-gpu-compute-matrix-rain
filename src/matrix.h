/*
 * glyphs.h
 *
 *  Created on: 4 ao√ªt 2025
 *      Author: descourt
 */

#pragma once
#include <cstdint>
#include <cmath>
#include <functional>

// source : https://github.com/dhepper/font8x8/blob/master/font8x8_basic.h
//
struct Row;
static uint32_t number_of_glyphs = 2 * 177;

static uint32_t glyphs_size_in_bytes = number_of_glyphs * sizeof(uint32_t);

static size_t delta = 1;
static size_t numberofMaxRows = 1000;
static size_t lineMaxLength = 1000;
static size_t number_of_symbols = 1000;
static size_t symbols_size_in_bytes = 1000;

static int right_most;
static int up_most;
static int y_max;
static float z_max;
static int m_activerows;
static int m_proba_Active;
static Row *rows;


struct Symbol
{
	 int visible;
	 int _state;
	 float pos_x;
	 float pos_y;
	 int id_glyph;
	 float blending;
	 float speed;
	 uint32_t color;
};

static Symbol *symbols;

static uint8_t font8x8[177][8] =
{
   // { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},
    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (//)
    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
    { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
    { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
    { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
    { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
    { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
    { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
    { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
    { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
    { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
    { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
    { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
    { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
    { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
    { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
    { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
    { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
    { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
    { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
    { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
    { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
    { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|)
    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
    { 0x04, 0x3F, 0x04, 0x3C, 0x56, 0x4D, 0x26, 0x00},   // U+3041 (Hiragana a)
    { 0x04, 0x3F, 0x04, 0x3C, 0x56, 0x4D, 0x26, 0x00},   // U+3042 (Hiragana A)
    { 0x00, 0x00, 0x00, 0x11, 0x21, 0x25, 0x02, 0x00},   // U+3043 (Hiragana i)
    { 0x00, 0x01, 0x11, 0x21, 0x21, 0x25, 0x02, 0x00},   // U+3044 (Hiragana I)
    { 0x00, 0x1C, 0x00, 0x1C, 0x22, 0x20, 0x18, 0x00},   // U+3045 (Hiragana u)
    { 0x3C, 0x00, 0x3C, 0x42, 0x40, 0x20, 0x18, 0x00},   // U+3046 (Hiragana U)
    { 0x1C, 0x00, 0x3E, 0x10, 0x38, 0x24, 0x62, 0x00},   // U+3047 (Hiragana e)
    { 0x1C, 0x00, 0x3E, 0x10, 0x38, 0x24, 0x62, 0x00},   // U+3048 (Hiragana E)
    { 0x24, 0x4F, 0x04, 0x3C, 0x46, 0x45, 0x22, 0x00},   // U+3049 (Hiragana o)
    { 0x24, 0x4F, 0x04, 0x3C, 0x46, 0x45, 0x22, 0x00},   // U+304A (Hiragana O)
    { 0x04, 0x24, 0x4F, 0x54, 0x52, 0x12, 0x09, 0x00},   // U+304B (Hiragana KA)
    { 0x44, 0x24, 0x0F, 0x54, 0x52, 0x52, 0x09, 0x00},   // U+304C (Hiragana GA)
    { 0x08, 0x1F, 0x08, 0x3F, 0x1C, 0x02, 0x3C, 0x00},   // U+304D (Hiragana KI)
    { 0x44, 0x2F, 0x04, 0x1F, 0x0E, 0x01, 0x1E, 0x00},   // U+304E (Hiragana GI)
    { 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00},   // U+304F (Hiragana KU)
    { 0x28, 0x44, 0x12, 0x21, 0x02, 0x04, 0x08, 0x00},   // U+3050 (Hiragana GU)
    { 0x00, 0x22, 0x79, 0x21, 0x21, 0x22, 0x10, 0x00},   // U+3051 (Hiragana KE)
    { 0x40, 0x22, 0x11, 0x3D, 0x11, 0x12, 0x08, 0x00},   // U+3052 (Hiragana GE)
    { 0x00, 0x00, 0x3C, 0x00, 0x02, 0x02, 0x3C, 0x00},   // U+3053 (Hiragana KO)
    { 0x20, 0x40, 0x16, 0x20, 0x01, 0x01, 0x0E, 0x00},   // U+3054 (Hiragana GO)
    { 0x10, 0x7E, 0x10, 0x3C, 0x02, 0x02, 0x1C, 0x00},   // U+3055 (Hiragana SA)
    { 0x24, 0x4F, 0x14, 0x2E, 0x01, 0x01, 0x0E, 0x00},   // U+3056 (Hiragana ZA)
    { 0x00, 0x02, 0x02, 0x02, 0x42, 0x22, 0x1C, 0x00},   // U+3057 (Hiragana SI)
    { 0x20, 0x42, 0x12, 0x22, 0x02, 0x22, 0x1C, 0x00},   // U+3058 (Hiragana ZI)
    { 0x10, 0x7E, 0x18, 0x14, 0x18, 0x10, 0x0C, 0x00},   // U+3059 (Hiragana SU)
    { 0x44, 0x2F, 0x06, 0x05, 0x06, 0x04, 0x03, 0x00},   // U+305A (Hiragana ZU)
    { 0x20, 0x72, 0x2F, 0x22, 0x1A, 0x02, 0x1C, 0x00},   // U+305B (Hiragana SE)
    { 0x80, 0x50, 0x3A, 0x17, 0x1A, 0x02, 0x1C, 0x00},   // U+305C (Hiragana ZE)
    { 0x1E, 0x08, 0x04, 0x7F, 0x08, 0x04, 0x38, 0x00},   // U+305D (Hiragana SO)
    { 0x4F, 0x24, 0x02, 0x7F, 0x08, 0x04, 0x38, 0x00},   // U+305E (Hiragana ZO)
    { 0x02, 0x0F, 0x02, 0x72, 0x02, 0x09, 0x71, 0x00},   // U+305F (Hiragana TA)
    { 0x42, 0x2F, 0x02, 0x72, 0x02, 0x09, 0x71, 0x00},   // U+3060 (Hiragana DA)
    { 0x08, 0x7E, 0x08, 0x3C, 0x40, 0x40, 0x38, 0x00},   // U+3061 (Hiragana TI)
    { 0x44, 0x2F, 0x04, 0x1E, 0x20, 0x20, 0x1C, 0x00},   // U+3062 (Hiragana DI)
    { 0x00, 0x00, 0x00, 0x1C, 0x22, 0x20, 0x1C, 0x00},   // U+3063 (Hiragana tu)
    { 0x00, 0x1C, 0x22, 0x41, 0x40, 0x20, 0x1C, 0x00},   // U+3064 (Hiragana TU)
    { 0x40, 0x20, 0x1E, 0x21, 0x20, 0x20, 0x1C, 0x00},   // U+3065 (Hiragana DU)
    { 0x00, 0x3E, 0x08, 0x04, 0x04, 0x04, 0x38, 0x00},   // U+3066 (Hiragana TE)
    { 0x00, 0x3E, 0x48, 0x24, 0x04, 0x04, 0x38, 0x00},   // U+3067 (Hiragana DE)
    { 0x04, 0x04, 0x08, 0x3C, 0x02, 0x02, 0x3C, 0x00},   // U+3068 (Hiragana TO)
    { 0x44, 0x24, 0x08, 0x3C, 0x02, 0x02, 0x3C, 0x00},   // U+3069 (Hiragana DO)
    { 0x32, 0x02, 0x27, 0x22, 0x72, 0x29, 0x11, 0x00},   // U+306A (Hiragana NA)
    { 0x00, 0x02, 0x7A, 0x02, 0x0A, 0x72, 0x02, 0x00},   // U+306B (Hiragana NI)
    { 0x08, 0x09, 0x3E, 0x4B, 0x65, 0x55, 0x22, 0x00},   // U+306C (Hiragana NU)
    { 0x04, 0x07, 0x34, 0x4C, 0x66, 0x54, 0x24, 0x00},   // U+306D (Hiragana NE)
    { 0x00, 0x00, 0x3C, 0x4A, 0x49, 0x45, 0x22, 0x00},   // U+306E (Hiragana NO)
    { 0x00, 0x22, 0x7A, 0x22, 0x72, 0x2A, 0x12, 0x00},   // U+306F (Hiragana HA)
    { 0x80, 0x51, 0x1D, 0x11, 0x39, 0x15, 0x09, 0x00},   // U+3070 (Hiragana BA)
    { 0x40, 0xB1, 0x5D, 0x11, 0x39, 0x15, 0x09, 0x00},   // U+3071 (Hiragana PA)
    { 0x00, 0x00, 0x13, 0x32, 0x51, 0x11, 0x0E, 0x00},   // U+3072 (Hiragana HI)
    { 0x40, 0x20, 0x03, 0x32, 0x51, 0x11, 0x0E, 0x00},   // U+3073 (Hiragana BI)
    { 0x40, 0xA0, 0x43, 0x32, 0x51, 0x11, 0x0E, 0x00},   // U+3074 (Hiragana PI)
    { 0x1C, 0x00, 0x08, 0x2A, 0x49, 0x10, 0x0C, 0x00},   // U+3075 (Hiragana HU)
    { 0x4C, 0x20, 0x08, 0x2A, 0x49, 0x10, 0x0C, 0x00},   // U+3076 (Hiragana BU)
    { 0x4C, 0xA0, 0x48, 0x0A, 0x29, 0x48, 0x0C, 0x00},   // U+3077 (Hiragana PU)
    { 0x00, 0x00, 0x04, 0x0A, 0x11, 0x20, 0x40, 0x00},   // U+3078 (Hiragana HE)
    { 0x20, 0x40, 0x14, 0x2A, 0x11, 0x20, 0x40, 0x00},   // U+3079 (Hiragana BE)
    { 0x20, 0x50, 0x24, 0x0A, 0x11, 0x20, 0x40, 0x00},   // U+307A (Hiragana PE)
    { 0x7D, 0x11, 0x7D, 0x11, 0x39, 0x55, 0x09, 0x00},   // U+307B (Hiragana HO)
    { 0x9D, 0x51, 0x1D, 0x11, 0x39, 0x55, 0x09, 0x00},   // U+307C (Hiragana BO)
    { 0x5D, 0xB1, 0x5D, 0x11, 0x39, 0x55, 0x09, 0x00},   // U+307D (Hiragana PO)
    { 0x7E, 0x08, 0x3E, 0x08, 0x1C, 0x2A, 0x04, 0x00},   // U+307E (Hiragana MA)
    { 0x00, 0x07, 0x24, 0x24, 0x7E, 0x25, 0x12, 0x00},   // U+307F (Hiragana MI)
    { 0x04, 0x0F, 0x64, 0x06, 0x05, 0x26, 0x3C, 0x00},   // U+3080 (Hiragana MU)
    { 0x00, 0x09, 0x3D, 0x4A, 0x4B, 0x45, 0x2A, 0x00},   // U+3081 (Hiragana ME)
    { 0x02, 0x0F, 0x02, 0x0F, 0x62, 0x42, 0x3C, 0x00},   // U+3082 (Hiragana MO)
    { 0x00, 0x00, 0x12, 0x1F, 0x22, 0x12, 0x04, 0x00},   // U+3083 (Hiragana ya)
    { 0x00, 0x12, 0x3F, 0x42, 0x42, 0x34, 0x04, 0x00},   // U+3084 (Hiragana YA)
    { 0x00, 0x00, 0x11, 0x3D, 0x53, 0x39, 0x11, 0x00},   // U+3085 (Hiragana yu)
    { 0x00, 0x11, 0x3D, 0x53, 0x51, 0x39, 0x11, 0x00},   // U+3086 (Hiragana YU)
    { 0x00, 0x08, 0x38, 0x08, 0x1C, 0x2A, 0x04, 0x00},   // U+3087 (Hiragana yo)
    { 0x08, 0x08, 0x38, 0x08, 0x1C, 0x2A, 0x04, 0x00},   // U+3088 (Hiragana YO)
    { 0x1E, 0x00, 0x02, 0x3A, 0x46, 0x42, 0x30, 0x00},   // U+3089 (Hiragana RA)
    { 0x00, 0x20, 0x22, 0x22, 0x2A, 0x24, 0x10, 0x00},   // U+308A (Hiragana RI)
    { 0x1F, 0x08, 0x3C, 0x42, 0x49, 0x54, 0x38, 0x00},   // U+308B (Hiragana RU)
    { 0x04, 0x07, 0x04, 0x0C, 0x16, 0x55, 0x24, 0x00},   // U+308C (Hiragana RE)
    { 0x3F, 0x10, 0x08, 0x3C, 0x42, 0x41, 0x30, 0x00},   // U+308D (Hiragana RO)
    { 0x00, 0x00, 0x08, 0x0E, 0x38, 0x4C, 0x2A, 0x00},   // U+308E (Hiragana wa)
    { 0x04, 0x07, 0x04, 0x3C, 0x46, 0x45, 0x24, 0x00},   // U+308F (Hiragana WA)
    { 0x0E, 0x08, 0x3C, 0x4A, 0x69, 0x55, 0x32, 0x00},   // U+3090 (Hiragana WI)
    { 0x06, 0x3C, 0x42, 0x39, 0x04, 0x36, 0x49, 0x00},   // U+3091 (Hiragana WE)
    { 0x04, 0x0F, 0x04, 0x6E, 0x11, 0x08, 0x70, 0x00},   // U+3092 (Hiragana WO)
    { 0x08, 0x08, 0x04, 0x0C, 0x56, 0x52, 0x21, 0x00},   // U+3093 (Hiragana N)
    { 0x40, 0x2E, 0x00, 0x3C, 0x42, 0x40, 0x38, 0x00}    // U+3094 (Hiragana VU)
};



float frandom(float min, float max){
	srand (time(NULL));
	return min + (max-min)*((float)rand()/(float)RAND_MAX);
}

uint urandom(uint min, uint max){
	srand (time(NULL));
	return min + rand()%max;
}


struct Row
{

         float z;
         uint32_t m_lineLength;

         uint32_t id;

         float speed;
         uint8_t m_init;
         uint32_t m_lineLengthMax;

         int _proba_isActive;

         int m_activeCels; // si 0 ligne inactive

         uint8_t m_timer_init; // timer pour la r√©apparition d'une ligne

         uint8_t m_time_init;

         uint8_t m_timer_update; // timer pour la r√©apparition d'une ligne

         uint8_t m_time_update;

         uint32_t moving_cell; // cels qui propagent l'opacit√©
         uint8_t plane_index;
         int delta;// letter spacing

         float xpos, ypos;

         int start_symbol_index;

         inline void Initialize(float Xmost, float startY)
        {


            if (m_time_init < m_timer_init)
            {
                m_time_init++;
                return;
            }

            /*if ((Random.Range(0,100)  > _proba_isActive))
            {
                return;
            }*/
            m_time_init = 0;

            m_timer_init = (uint8_t)(urandom(10,30) & 0XFF);

            m_lineLength = m_lineLengthMax;

            speed = 1.0 + frandom(0,2);

            ypos = startY; //  +float(rand() % 10 - 20);
            xpos = Xmost;

            //z = 0.5f + float( rand() % 20 ) + float( rand() % 50 ) * .01f;

            //z = 0.5f + float(rand() % 10000) * 0.1f;

            moving_cell = 0;


            int k = start_symbol_index;
            for (uint32_t i = 0; i < m_lineLength; i++)
            {

            	Symbol *s = symbols+k;

                if (i == 0)
                {
                    s->speed = speed;
                }
                else
                    s->speed = 0;
                uint glyph_id = urandom(0, number_of_glyphs - 1);
                s->id_glyph = glyph_id % 2 == 0 ? glyph_id : glyph_id + 1;
                s->_state = 1;
                s->pos_y = ypos;
                k++;
            }
            m_activeCels = m_lineLength;
            m_time_update = (uint8_t)(urandom(0,15));
            m_timer_update = (uint8_t)(1 +urandom(0,15));
        }

         inline void UpdateSymbol(Symbol *symbol, int row_id)
             {
                 int state = 1;// symbols[i]._state;
                 switch (state)
                 {
                     case 1:

                         symbol->pos_y += symbol->speed;
                         if (symbol->visible == 1)
                         {
                             if (symbol->blending < 1.0f)
                             {
                                 symbol->blending += 0.01f;
                             }
                         }
                         break;
                         // do nothing
                 }

             }

         inline void update()
        {


            if (m_activeCels == 0)
            {

                return;
            }

            Symbol *symbol = symbols+start_symbol_index + moving_cell;

            if (moving_cell < m_lineLength - 1) // il y a encore du boulot pour initialiser la ligne
            {


                // print(" current pos y " + symbols[start_symbol_index + moving_cell].pos_y + "  next pos y " + symbols[start_symbol_index + moving_cell+1].pos_y);

                //if (symbol->pos_y < (symbol+ 1)->pos_y - 8)
                if (symbol->pos_y > (symbol+ 1)->pos_y + 8)
                {
                    // print("starting next cell speed was " + symbols[start_symbol_index + moving_cell+1].speed);
                    (symbol + 1)->speed = symbol->speed;
                    (symbol + 1)->visible = 1; // cell devient visible
                                                                               // print("starting next cell speed is " + symbols[start_symbol_index + moving_cell+1].speed);
                    moving_cell++;
                }
            }
            // on update la position de la cel

            //  print("m_lineLength " + m_lineLength);

            for (uint32_t i = 0; i < m_lineLength; i++)
            {
            	symbol = symbols+start_symbol_index + i;
                UpdateSymbol(symbol, id);

                //if (symbol->pos_y < 0)
                if (symbol->pos_y > y_max)
                {
                    symbol->_state = 1;
                    symbol->pos_y = ypos;
                    symbol->speed = 1 + frandom(0,1);
                    int g = frandom(0, number_of_glyphs - 1);
                    symbol->id_glyph = g % 2 == 0 ? g : g + 1;
                    symbol->blending = 0.0f;
                }
            }

            if (m_activeCels == 0)
            {
                return;
            }

            // on update le contenu de la cell
            if (m_time_update < m_timer_update)
            {
                m_time_update++;
                return;
            }

            m_time_update = 0;

            int v = 0;
            int v_tmp = 0;
            for (uint32_t i = 0; i < m_lineLengthMax; i++)
            {
            	Symbol *symbol = symbols+start_symbol_index + i;
                if (i > 0)
                {
                    v_tmp = symbol->id_glyph; // on sauve le contenu actuel
                    if (i == 1)
                    {
                        symbol->id_glyph = (symbols+start_symbol_index)->id_glyph; //
                    }
                    else
                    {
                        symbol->id_glyph = v;
                    }
                    v = v_tmp;
                }

                //  print("symbol " + start_symbol_index + i + " glyph " + symbols[start_symbol_index + i].id_glyph+" pos x "+ symbols[start_symbol_index + i].pos_x+" "+ symbols[start_symbol_index + i].pos_y);

            }
            // on est sur la premi√®re, on lui transmet le contenu de la derni√®re et on r√©initialise la derni√®re
            uint glyph = urandom(0, number_of_glyphs - 1);
            symbols[start_symbol_index].id_glyph = glyph % 2 == 0 ? glyph : glyph + 1;
            // on place son ancien contenu sur la premi√®re


        }
};


inline uint32_t * ComputeGlyphsDataToHighAndLowInt()
{

    uint32_t *glyphs = (uint32_t *)malloc(glyphs_size_in_bytes);
    int k = 0;
    for (uint32_t i = 0; i < number_of_glyphs; i += 2)
    {
        *(glyphs + i) =     (uint32_t) ( (font8x8[k][7] << 24) | (font8x8[k][6] << 16) | (font8x8[k][5] << 8) |  font8x8[k][4] );
        *(glyphs + i + 1) = (uint32_t) ( (font8x8[k][3] << 24) | (font8x8[k][2] << 16)  | (font8x8[k][1] << 8) |  font8x8[k][0] );
        //  print("k = "+k+" "+glyphs[i] + " " + glyphs[i + 1]+" n = "+n);
        k++;
    }

    return glyphs;
}

inline void initialize_matrix_rows(int w, int h,int lineMaxLength)
{


    rows = new Row[numberofMaxRows];

    z_max = 0.0f;
    right_most = w;
    up_most = -18; // h + 18 ;
    y_max = h + 18;

    float abscisse = 8;
    float ordonnee = up_most;
    m_activerows = 0;

    m_proba_Active = 75;

    if (m_proba_Active <= 0)
        m_proba_Active = 50;




    int symbole_indice = 0;

    for (size_t i = 0; i < numberofMaxRows; i++)
    {

        Row *row = rows+i;
        row->id = i;
        row->start_symbol_index = i * lineMaxLength ;
       // if ((active_line = (Random.Range(0,100) < m_proba_Active)))
       // {
            m_activerows++;
       // }

        row->_proba_isActive = m_proba_Active;
        row->m_activeCels = 0;
        row->m_lineLengthMax = lineMaxLength;
        row->m_time_init = 0;
        row->m_timer_init = 0; // √† l'init on les pr√©sente sans tarder
        row->m_time_update = 0;
        row->m_timer_update =(uint8_t) ( 5 +   frandom(10,20) );
        row->speed = 1+ frandom(0,0.25);
        row->ypos = ordonnee;
        if (abscisse + delta > right_most)//indexPlane > numberofMaxLinesPerPlane - 1 || abscisse + _delta  > right_most )
        {
            abscisse = 8;
        }
        // on cr√©e une ligne
        row->m_lineLength = lineMaxLength;
        row->delta = delta;
        ordonnee = up_most;

        uint color = 0XFF << 16 | 0XFF; // GREEN
        row->moving_cell = 0;
        int glyph_id;
        for (int k = 0; k < lineMaxLength; k++)
        {
        	Symbol *symbol =  symbols + symbole_indice;
            symbol->color = color;

            glyph_id = frandom(0, number_of_glyphs - 1);
            symbol->id_glyph = ( glyph_id % 2 == 0 ? glyph_id : glyph_id+1);
            symbol->speed = 0;
            symbol->pos_x = (int) abscisse;
            symbol->pos_y = (int) ordonnee;

            //print("initialization : symbol " + symbole_indice + " " + symbol->pos_x + " " + symbol->pos_y);

            if (k == 0)
            {
                symbol->speed = row->speed; // + 10;//row->speed;
            }

            if (k < lineMaxLength )
            {
                symbol->_state = 1; // active
                row->m_activeCels++;
            }
            else
            {
                symbol->_state = 0;
            }
            //ordonnee += _delta;
            symbole_indice ++; // on passe √† la cell suivante

        }
        abscisse += 8; //  * (10.f + float(rand() % 5000) * 0.1f );

    }
}

	inline void initialize_matrix(int w,int h)
    {
        // on place dans chaque cellule l'indice (0-55) qui correspond √† l' image d'une lettre verte ou blanche dnas les buffers de texture

        numberofMaxRows = w / 8 + 3;
        lineMaxLength = 1 * h / 8;

        number_of_symbols = numberofMaxRows * lineMaxLength;
        symbols_size_in_bytes = number_of_symbols*sizeof(Symbol);
        symbols = (Symbol *)calloc(number_of_symbols,sizeof(Symbol));
        initialize_matrix_rows(w,h,lineMaxLength);

    }

	void update_matrix()
    {

        int inactiverows = 0;
        Row *row;
        for (size_t i = 0; i < numberofMaxRows; i++)
        {
        	row = rows +i;
            if (row->m_activeCels == 0)
            {
                row->Initialize(right_most, up_most);
                if (row->m_activeCels == 0)
                {
                    inactiverows++;
                }
                else
                {
                    m_activerows++;
                }
            }
            else
            {
                row->update();
                if (row->m_activeCels == 0)
                {
                    m_activerows--;
                    inactiverows++;
                }
            }

        }

        int activeGlyphs = 0;
        for (size_t i = 0; i < numberofMaxRows;i++)
        {
            activeGlyphs += (rows+i)->m_activeCels;
        }

        //printf("active rows %i  inactive %i  total %i   active glyphs %i \n",m_activerows,inactiverows,m_activerows + inactiverows,activeGlyphs);

    }




